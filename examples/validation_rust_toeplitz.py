"""
This example tests the high-performance Rust implementation from https://github.com/cryptohslu/toeplitz-rust
against randextract using the Validator class with input_method='stdio' and input_method='read_files'.

This example assumes that a file generated with the rust implementation exists in the same folder as the
working directory from where you execute the script. For example, you can generate such a file running the
following:

git clone https://github.com/cryptohslu/toeplitz-rust.git
cd toeplitz-rust
cargo run --release --bin toeplitz realfft gen 1000 toeplitz-realfft.gen 1048576 524288

If you use different input or output length, don't forget to update the variables below.
"""

import datetime
import time

import numpy as np
from galois import GF2
from randextract import ToeplitzHashing, Validator

INPUT_LENGTH_STDIO = 6
OUTPUT_LENGTH_STDIO = 4

INPUT_LENGTH_FILES = 1048576
OUTPUT_LENGTH_FILES = 524288


def brute_force_stdio_test():
    print("\nFirst we brute force all the possible inputs and seeds for a small family")
    print("of Toeplitz functions with:\n")
    print(f"input_length = {INPUT_LENGTH_STDIO}")
    print(f"output_length = {OUTPUT_LENGTH_STDIO}\n")
    ext = ToeplitzHashing(INPUT_LENGTH_STDIO, OUTPUT_LENGTH_STDIO)
    val = Validator(ext)

    def gf2_to_str(gf2_arr):
        return (np.array(gf2_arr) + ord("0")).tobytes().decode()

    val.add_implementation(
        label="Rust-stdio-simple",
        input_method="stdio",
        command="./toeplitz simple run-args $SEED$ $INPUT$",
        format_dict={"$SEED$": gf2_to_str, "$INPUT$": gf2_to_str},
    )
    val.add_implementation(
        label="Rust-stdio-fft",
        input_method="stdio",
        command="./toeplitz fft run-args $SEED$ $INPUT$",
        format_dict={"$SEED$": gf2_to_str, "$INPUT$": gf2_to_str},
    )
    val.add_implementation(
        label="Rust-stdio-realfft",
        input_method="stdio",
        command="./toeplitz realfft run-args $SEED$ $INPUT$",
        format_dict={"$SEED$": gf2_to_str, "$INPUT$": gf2_to_str},
    )

    print(val)
    print(f"{datetime.datetime.now():%Y-%m-%d %H:%M:%S}")
    print(f"Starting brute-force testing...\n")
    start = time.perf_counter()
    val.validate(mode="brute-force", max_attempts="all")
    stop = time.perf_counter()
    print(val)
    print(f"{datetime.datetime.now():%Y-%m-%d %H:%M:%S}")
    print(f"Brute-force validation finished in {round(stop - start)} seconds\n")


def read_files_test():
    try:
        with open("toeplitz.gen", "r") as f:
            pass
    except FileNotFoundError:
        print(
            "Toeplitz.gen file does not exist. You can generate it, for example, by running:"
        )
        print("./toeplitz gen 1000 toeplitz.gen 1048576 524288")
        return

    print("Now we test some cases generated by the Rust binary and saved to a file.")
    print("The Toeplitz hash family has:\n")
    print(f"input_length = {INPUT_LENGTH_FILES}")
    print(f"output_length = {OUTPUT_LENGTH_FILES}\n")
    ext = ToeplitzHashing(INPUT_LENGTH_FILES, OUTPUT_LENGTH_FILES)
    val = Validator(ext)

    def read_file(length):
        with open("toeplitz.gen", "r") as f:
            for i, line in enumerate(f):
                line = line.strip()
                if len(line) == length:
                    yield GF2(np.frombuffer(line.encode(), dtype=np.uint8) - ord("0"))
            return

    val.add_implementation(
        "Rust-file",
        input_method="read_files",
        parser={
            "input": read_file(ext.input_length),
            "seed": read_file(ext.seed_length),
            "output": read_file(ext.output_length),
        },
    )

    print(val)
    print(f"{datetime.datetime.now():%Y-%m-%d %H:%M:%S}")
    print(f"Starting read-files testing...\n")
    start = time.perf_counter()
    val.validate()
    stop = time.perf_counter()
    print(val)
    print(f"{datetime.datetime.now():%Y-%m-%d %H:%M:%S}")
    print(f"Read-files validation finished in {round(stop - start)} seconds\n")


def main():
    print("\nThis script tests a high-performance Rust implementation of the Toeplitz")
    print("hashing against the class ToeplitzHashing from randextract.")
    brute_force_stdio_test()
    read_files_test()


if __name__ == "__main__":
    main()
